---
title: "Преимущества Event Sourcing архитектуры"
summary: "Event Sourcing + CQRS: какие преимущества эта архитектура дает по сравнению с классическим подходом CRUD"
date: 2021-04-23T12:52:36+06:00
image_webp: images/blog/performance-1.png
image: images/blog/performance-1.png
author: Михаил Сайгаченко, Heeus Team
description : "Event Sourcing + CQRS: какие преимущества эта архитектура дает по сравнению с классическим подходом CRUD"
---

## Вступление
Event Sourcing - относительно молодой подход в построении архитектуры хранения данных приложений. Пожалуй, чаще всего в качестве первого источника, подробно описывающего принципы архитектуры упоминают [статью Мартина Фаулера](https://martinfowler.com/eaaDev/EventSourcing.html), известного автора книг и статей в области разработки ПО. В сети также можно найти ряд статей на эту тему, как на русском, так и на английском. Тем не менее, поскольку Event Sourcing и CQRS имеет прямое отношение с к проекту Heeus, мы (авторы проекта) посчитали нужным опубликовать обзорную статью про эту архитектуру и в нашем блоге. 

## Суть Event Sourcing
В плоть до текущего момента преобладающим подходом в организации хранения и доступа к данным был и остается так называемый CRUD (аббревиатура от Create-Read-Update-Delete, по названию основных процедур доступа к данным). В классическом подходе в БД хранятся(преимущественно) только финальные состояния объектов. Иными словами, если к объекту применяется ряд модификаций, то БД содержит только состояние объекта после последнего изменения. 

В отличие от CRUD, Event Sourcing провозглашает противоположный подход: все действия, создающие или изменяющие объекты, последовательно сохраняются в БД в виде событий, формируя в базе так называемый Event Log (журнал событий). Состояние того или иного объекта, как и всей системы целиком, на любой момент времени может быть получено вычислением, а именно - путем "проигрывания" событий журнала и последовательного применения событий. Такая архитектура намного сложнее в разработке, чем системы на базе CRUD, но в конечном итоге имеет ряд неоспоримых преимуществ.

## Что такое CQRS
CQRS - аббревиатура от Command Query Responsibility Segregation, буквально - разделение ответственности на команды и запросы. Данный шаблон проектирования системы в применении к Event Sourcing означает, что запросы на чтение не оперируют напрямую с журналом событий (Event Log), а берутся из специального хранилища, сформируемого на основании обработки журнала событий, и оптимизированного для операций чтения. Это оптимизирует производительность системы, масштабируемость и безопасность. 

## Зачем все это
Предположим, что у нас имеется платформа, построенная на базе архитектуры Event Sourcing + CQRS, позволяющая размещать и запускать пользовательские микросервисы. Какие преимущества дает использование именно такой архитектуры для размещения микросервисов?
 
 - Такая система в целом значительно более предсказуема и масштабируема.
 - В основе данных - журнал событий, соответственно такая архитектура по определению идеально подходит для любых приложений, где требуется журнал аудита: торговля, управление задачами, рестораны/отели, склады, интернет вещей, и прочее. 
 - Система более устойчива к сбоям.
 - Приложения/микросервисы, оперирующие данными по технологии CQRS, значительно проще разрабатывать и тестировать.
 

## Ссылки
- https://martinfowler.com/eaaDev/EventSourcing.html
- https://habr.com/ru/post/146429/ и https://habr.com/ru/post/149464/
- https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing
- 